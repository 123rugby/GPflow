class Model(tf.Module):
    def __init__(self):
        self.v = tf.Variable(tf.eye(3))
        self.m = tf.Variable(tf.ones((3,)))
        self.mvn = tfp.distributions.MultivariateNormalTriL(loc=m, scale_tril=v)

    def objective(n):
        return tf.reduce_sum(mvn.sample(n) ** 2)

model = Model()

with tf.GradientTape() as tape:
    o = model.objective(2)
    g = tape.gradient(o, m)

In [14]: g
Out[14]: [None]